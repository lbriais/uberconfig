# bootstrap file for the shell setup process
# it will probe the environment for os, shell type and then source
# recursively config files from the $uber_config folder
#
# This file should be sourced from your bashrc, zshrc.override ...

# Saving some variales for later
dollar_="$_"
dollar0="$0"
candidate_path="$1"
# echo "0 => ${dollar0} _ => ${dollar_}"

get_script_path() {

    # Default is working for zsh
    local this_script_path=$dollar0
    if [ "bash" = "${cur_shell}" ]; then
	this_script_path="${BASH_SOURCE}"
    fi
    if [ "dash" = "${cur_shell}" ]; then
	this_script_path="${DASH_SOURCE}"
    fi
    cd `dirname "${this_script_path}"`
    local _realdir=`readlink -f .`
    echo ${_realdir}
}

get_config_path() {
    # Default path to the config
    local config_path=~/.config/uberconfig
    # The parameter passed to the script is only accepted is it is a real directory
    if [ -d "${candidate_path}" ]; then
	config_path="${candidate_path}"
    fi
    echo ${config_path}
}


check_config_directory() {
    if ! [ -d "${uber_config}" ]; then
        log_debug " - Creating config directory: ${uber_config}"
        mkdir -p "${uber_config}"
    else
        log_debug " - Using config directory: ${uber_config}"
    fi
}

check_install() {
    check_config_directory
}


get_current_os() {
    echo `uname`
}


get_current_shell() {
    local this_shell=`ps -p $$ |grep / | sed 's/.* //' | sed 's/.*\///'`
    # Handles the case of "sh"
    if [ "sh" = "${this_shell}" ]; then
	local sh_bin=`which sh`
	this_shell=`readlink -f "${sh_bin}"|sed 's/^.*\/\([^\/]*\)$/\1/'`
    fi
    echo ${this_shell}
}

log_debug() {
    if ! [ -z ${DEBUG} ]; then
        echo "$*"        
    fi
}

process_config_file() {
    local config_file="$*"

    # Special case of scripts that have to be executed once only
    if (echo ${config_file} |grep -ie 'exec[-_ ]once' 2>&1 >> /dev/null); then
	if [ -r "${config_file}.done" ]; then
	    log_debug "   - Skipping ${config_file}." 
	else
	    log_debug "   - Sourcing and locking '${config_file}'."
	    . "${config_file}"
	    touch "${config_file}.done"
	fi
	return
    fi

    # Source standard conf file
    log_debug "   - Sourcing '${config_file}'."
    . "${config_file}"
}

process_directory() {
    local _dir="$*"

    # Processing directory files
    log_debug " - Processing files in directory ${_dir}"
    local nbfiles=`find "${_dir}/"  -maxdepth 1 -type f -iname '*.conf' | wc -l`
    log_debug "   - Found ${nbfiles} config files."
    if [ "$nbfiles" != "0" ]; then
	local tmpfile=`mktemp`
        find "${_dir}/"  -maxdepth 1 -type f -iname '*.conf' |sort 2> /dev/null > $tmpfile
	for config_file in `cat $tmpfile`
        do
            process_config_file "${config_file}"
        done
	rm $tmpfile
    fi

    # Processing sub directory matching current os name
    if [ -d "${_dir}/${cur_os}" ]; then
        process_directory  "${_dir}/${cur_os}"
    else
        log_debug " - No directory found ${_dir}/${cur_os}, skipping..."
    fi
    # Processing sub directory matching current shell name
    if [ -d "${_dir}/${cur_shell}" ]; then
        process_directory  "${_dir}/${cur_shell}"
    else
        log_debug " - No directory found ${_dir}/${cur_shell}, skipping..."
    fi
}



log_debug '--------------------------------------------------------------------------------'
log_debug ' Starting environment setup'
log_debug '--------------------------------------------------------------------------------'

cur_os=$(get_current_os)
cur_shell=$(get_current_shell)
uber_config=$(get_config_path)

check_install

# The following requires that cur_shell is already known
uber_dir=$(get_script_path)

log_debug "OS detected                          : ${cur_os}"
log_debug "Shell detected                       : ${cur_shell}"
log_debug "Uberconfig installation directory is : ${uber_dir}"
log_debug '--------------------------------------------------------------------------------'

# Here we go
process_directory "${uber_config}"

log_debug '--------------------------------------------------------------------------------'




