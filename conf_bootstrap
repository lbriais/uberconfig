# bootstrap file for the shell setup process
# it will probe the environment for os, shell type and then source
# recursively config files from the $uber_config folder
#
# This file should be sourced from your bashrc, zshrc.override ...

# Saving some variables for later use
dollar_="$_"
dollar0="$0"
candidate_path="$1"
# echo "0 => ${dollar0} _ => ${dollar_}"


get_script_path() {

    # Default is working for zsh
    local this_script_path=$dollar0
    if [ "bash" = "${cur_shell}" ]; then
	this_script_path="${BASH_SOURCE}"
    fi
    if [ "dash" = "${cur_shell}" ]; then
	this_script_path="${DASH_SOURCE}"
    fi
    cd `dirname "${this_script_path}"`
    local _realdir=`readlink -f .`
    echo ${_realdir}
    cd "${OLDPWD}"
}

get_config_path() {
    # Default path to the config
    local config_path=~/.config/uberconfig
    # The parameter passed to the script is only accepted is it is a real directory
    if [ -d "${candidate_path}" ]; then
	config_path="${candidate_path}"
    fi
    echo ${config_path}
}


check_config_directory() {
    if ! [ -d "${uber_config}" ]; then
        __display_debug_info " - Creating config directory: ${uber_config}"
        mkdir -p "${uber_config}"
    else
        __display_debug_info " - Using config directory: ${uber_config}"
    fi
}

check_install() {
    check_config_directory
}


get_current_os() {
    echo `uname`
}


get_current_shell() {
    local this_shell=`ps -p $$ |tail -n 1 | sed 's/.* //' | sed 's/.*\///'`
    # Handles the case of "sh"
    if [ "sh" = "${this_shell}" ]; then
	local sh_bin=`which sh`
	this_shell=`readlink -f "${sh_bin}"|sed 's/^.*\/\([^\/]*\)$/\1/'`
    fi
    echo ${this_shell}
}

__display_debug_info() {
    if ! [ -z ${DEBUG_CONF_BOOTSTRAP} ]; then
        echo "$@"
    fi
}

process_config_file() {
    local config_file="$*"

    # Special case of scripts that have to be executed once only
    if (echo ${config_file} |grep -ie 'exec[-_ ]once[^\/]*$' 2>&1 >> /dev/null); then
	if [ -r "${config_file}.done" ]; then
	    __display_debug_info "   - Skipping ${config_file}." 
	else
	    __display_debug_info "   - Sourcing and locking '${config_file}'."
	    . "${config_file}"
	    touch "${config_file}.done"
	fi
	return
    fi

    # Source standard conf file
    __display_debug_info "   - Sourcing '${config_file}'."
    . "${config_file}"
}

process_directory() {
    local current_directory="$1"
    local extension="$2"

    # Processing directory files
    __display_debug_info " - Processing entries matching *${extension} in directory ${current_directory}"
    local nbfiles=`find "${current_directory}/" -maxdepth 1 -mindepth 1 -type f -iname "*${extension}" | wc -l`
    local nbdirs=`find "${current_directory}/" -maxdepth 1 -mindepth 1 -type d -iname "*${extension}" | wc -l`
    __display_debug_info "   - Found ${nbfiles} config files and ${nbdirs} directories."
    if [ "$nbfiles" != "0" -o "$nbdirs" != "0" ]; then
	local tmpfile=`mktemp`
        find "${current_directory}/" -maxdepth 1 -mindepth 1 -iname "*${extension}" |sort 2> /dev/null > $tmpfile
	# read -p "Paused in ${tmpfile}"
	for entry in `cat $tmpfile`
	do
	    if [ -f "${entry}" ]; then
		process_config_file "${entry}"
	    else

		if [ -r "${entry}.done" ]; then
		    __display_debug_info " - Skipping directory: ${entry}." 
		else
		    if (echo ${entry} |grep -ie 'exec[-_ ]once' 2>&1 >> /dev/null); then
			__display_debug_info " - Locking directory: ${entry}."
			touch "${entry}.done"
		    fi
		    recurse_process_directory "${entry}"
		fi
	    fi
        done
	rm $tmpfile
    fi
}



recurse_process_directory() {
    local current_directory="$1"

    # Processing *.conf files
    process_directory "${current_directory}" ".conf"

    # Processing sub directory matching current os name
    if [ -d "${current_directory}/${cur_os}" ]; then
        recurse_process_directory "${current_directory}/${cur_os}"
    else
	echo > /dev/null
        # __display_debug_info " - No directory found ${current_directory}/${cur_os}, skipping..."
    fi
    # Processing sub directory matching current shell name
    if [ -d "${current_directory}/${cur_shell}" ]; then
        recurse_process_directory "${current_directory}/${cur_shell}"
    else
	echo > /dev/null
        # __display_debug_info " - No directory found ${current_directory}/${cur_shell}, skipping..."
    fi

    # Processing *.post_conf files
    process_directory "${current_directory}" ".post_conf"
}


reload_shell_conf() {
    __display_debug_info '--------------------------------------------------------------------------------'
    __display_debug_info ' Starting environment setup'
    __display_debug_info '--------------------------------------------------------------------------------'

    cur_os=$(get_current_os)
    cur_shell=$(get_current_shell)
    uber_config=$(get_config_path)

    check_install

    # The following requires cur_shell to be already known
    uber_dir=$(get_script_path)

    __display_debug_info "OS detected                          : ${cur_os}"
    __display_debug_info "Shell detected                       : ${cur_shell}"
    __display_debug_info "Uberconfig installation directory is : ${uber_dir}"
    __display_debug_info '--------------------------------------------------------------------------------'

    recurse_process_directory "${uber_config}"

    __display_debug_info '--------------------------------------------------------------------------------'

}

# Here we go
case $- in
  *i*)
	reload_shell_conf
	;;
  *)
	;;
esac


